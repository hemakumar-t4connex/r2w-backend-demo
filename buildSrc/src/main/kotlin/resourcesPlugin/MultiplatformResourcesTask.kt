package resourcesPlugin
import org.gradle.api.DefaultTask
import org.gradle.api.Project
import org.gradle.api.tasks.TaskAction
import java.io.File
import java.nio.file.Files
import java.nio.file.Paths
import kotlin.io.path.ExperimentalPathApi
import kotlin.io.path.deleteRecursively

abstract class MultiplatformResourcesTask: DefaultTask(){

    data class ResourceFileInformation(
        val packageName: String,
        val variableName: String,
        val stringContents: String,
        val directory: String
    )

    @OptIn(ExperimentalPathApi::class)
    @TaskAction
    fun run() {
        println("Applying multiplatform resources plugin")
        Paths.get(project.multiplatformBuildDir).deleteRecursively()
        processResourcesInDirectory("commonMain", project, project.multiplatformResourcesDir)
        processResourcesInDirectory("commonTest", project, project.multiplatformTestResourcesDir)
        println("Multiplatform resource plugin successfully applied.")
    }

    fun processResourcesInDirectory(dir: String, target: Project, buildDir: String){
        println("Processing resources from $dir")
        val resourceDir = File(target.projectDir.absolutePath.replace("\\", "/") + "/src/$dir/resources")
        println("Using resources stored in $resourceDir")
        val newPackages = resourceDir.walk().mapNotNull {
            getFileInformation(it, resourceDir.absolutePath.replace("\\","/"))
        }
        println("Files being created in $buildDir")
        newPackages.forEach {
            val fullDirectory = "$buildDir/${it.directory}"
            Files.createDirectories(Paths.get(fullDirectory))
            val file = File("$fullDirectory/${it.variableName}.kt").apply {
                println(absolutePath)
                createNewFile()
            }
            file.writeText(fileString(it))
        }
    }

    private fun getFileInformation(f: File, resourceDir:String): ResourceFileInformation?{
        if(f.isDirectory) return null
        val packagePath = f.absolutePath.replace("\\","/").removePrefix("$resourceDir/")
        val split = packagePath.split("/")
        val variableName = split.last().split(".").first()
        val contents = f.readLines().joinToString("\n")
        val packageName = "com.t4connex.rtw.resources" + if(split.size == 1) "" else "." + split.subList(0, split.size - 1).joinToString(".")
        return ResourceFileInformation(packageName, variableName, contents, packageName.replace(".", "/"))
    }

    private fun fileString(resourceFileInformation: ResourceFileInformation): String{
        return "//This file was auto-generated by the multiplatform resources plugin\n" +
                "package ${resourceFileInformation.packageName}\n\n" +
                "val ${resourceFileInformation.variableName}=" +
                "\"\"\"${resourceFileInformation.stringContents}\"\"\""
    }



}